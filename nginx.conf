# nginxの実行ユーザーをnginxとする
user  nginx;

# ワーカーのプロセス数です。nginxは、複数のワーカープロセスを、一つのマスタープロセスで制御する仕組みで、
# ワーカープロセスは基本的にCPUのコア数と同じにしておけばよいのですが、autoとすることで、自動的にCPUのコア数分割り当ててくれます。
worker_processes  auto;

# error_logディレクティブは、errorファイルの場所です
error_log  /var/log/nginx/error.log notice;

# pidディレクティブは、先述のマスタープロセスのPIDを出力するPIDファイルのパスを指定します。
pid        /var/run/nginx.pid;

# nginxの特徴にイベント駆動型であることがよく挙げられますが、それに関するコンテキストです。このコンテキストは省略できません。
events {
    # worker_connectionsディレクティブは、一つのワーカーが処理できるコネクション数を指定します。
    worker_connections  1024;
}

http {
  # 拡張子ごとにMIMEタイプが設定されているファイルをインクルードしてくる
  include       /etc/nginx/mime.types;
  # default_typeディレクティブではレスポンスのデフォルトのMIMEタイプを設定します。
  # 上述のmime.typesで拡張子からMIMEタイプを決定できなかったときに、ここで指定したMIMEタイプが適応されます。なお、デフォルトの設定値はtext/plainです。
  default_type  application/octet-stream;

  server {
    listen 80;
    server_name localhost;

    # locationは任意のURI毎に異なる設定をするためのもの
    location / {
      # アプリのルートディレクトリを定義
      root /var/www;
      # indexディレクティブにはリクエストのURIが"/"で終わっている（つまりディレクトリになっている）ときにインデックスとして使われるファイル名を設定します。
      # リクエストURIのパスが"/"のときに、index.htmlというファイルが存在すれば、"/index.html"に内部リダイレクトします。
      index index.html;
      # try_filesディレクティブには存在をチェックするファイルやディレクトリと存在しなかったときにリダイレクトするURIのパスを指定します。
      try_files $uri /index.html;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}